//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data_Manager.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities_Data : DbContext
    {
        public Entities_Data()
            : base("name=Entities_Data")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<POS_ItemIn> POS_ItemIn { get; set; }
        public DbSet<POS_ItemOut> POS_ItemOut { get; set; }
        public DbSet<POS_MasterSale> POS_MasterSale { get; set; }
        public DbSet<tbl_Account> tbl_Account { get; set; }
        public DbSet<tbl_Bank> tbl_Bank { get; set; }
        public DbSet<tbl_Brand> tbl_Brand { get; set; }
        public DbSet<tbl_Category> tbl_Category { get; set; }
        public DbSet<tbl_Commission> tbl_Commission { get; set; }
        public DbSet<tbl_Customer> tbl_Customer { get; set; }
        public DbSet<tbl_Designation> tbl_Designation { get; set; }
        public DbSet<tbl_ExpenseDetail> tbl_ExpenseDetail { get; set; }
        public DbSet<tbl_Loan_Transaction_Backup> tbl_Loan_Transaction_Backup { get; set; }
        public DbSet<tbl_LoanPerson> tbl_LoanPerson { get; set; }
        public DbSet<tbl_MstExpense> tbl_MstExpense { get; set; }
        public DbSet<tbl_Orgcode> tbl_Orgcode { get; set; }
        public DbSet<tbl_Payment_Rcv> tbl_Payment_Rcv { get; set; }
        public DbSet<tbl_SalesTypeSetupForm> tbl_SalesTypeSetupForm { get; set; }
        public DbSet<tbl_StockMst> tbl_StockMst { get; set; }
        public DbSet<tbl_User> tbl_User { get; set; }
        public DbSet<tbl_Vendor> tbl_Vendor { get; set; }
        public DbSet<tbl_Complain_apps> tbl_Complain_apps { get; set; }
        public DbSet<tbl_InvoiceInfo> tbl_InvoiceInfo { get; set; }
        public DbSet<tbl_SaleDetail> tbl_SaleDetail { get; set; }
        public DbSet<tbl_SaleMaster> tbl_SaleMaster { get; set; }
        public DbSet<tbl_Stock> tbl_Stock { get; set; }
        public DbSet<tbl_oldstockinout> tbl_oldstockinout { get; set; }
        public DbSet<tbl_StockDaily> tbl_StockDaily { get; set; }
        public DbSet<POS_tables> POS_tables { get; set; }
        public DbSet<tbl_RateList> tbl_RateList { get; set; }
        public DbSet<tbl_daily_balance> tbl_daily_balance { get; set; }
        public DbSet<tbl_Account_Mst_Transaction_Backup> tbl_Account_Mst_Transaction_Backup { get; set; }
        public DbSet<tbl_Vendors_Mst_Transaction> tbl_Vendors_Mst_Transaction { get; set; }
        public DbSet<tbl_Vendors_Mst_Transaction_Backup> tbl_Vendors_Mst_Transaction_Backup { get; set; }
        public DbSet<tbl_Employee> tbl_Employee { get; set; }
        public DbSet<tbl_Account_Mst_Transaction> tbl_Account_Mst_Transaction { get; set; }
        public DbSet<tbl_Vendor_Payment> tbl_Vendor_Payment { get; set; }
        public DbSet<tbl_deposit_Amount> tbl_deposit_Amount { get; set; }
        public DbSet<tbl_Loan_Transactions> tbl_Loan_Transactions { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int datarefresh()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("datarefresh");
        }
    }
}
